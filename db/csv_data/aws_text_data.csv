title,content
【 第1章 】ネットワーク環境設定,"初めにVPC（Virtual Private Cloud）の設定を行っていきましょう！  
広いAWSという敷地の中で、自分の領域を決めるというイメージです。

## 1.VPCの作成

画面左上のサービスを開き、検索欄に「VPC」と入力し、「VPC」を選択します。  

まず右上のリージョンを「アジアパシフィック（東京）」に設定しましょう。  

トップ画面より「VPC」を選択して、詳細ページ左上の「VPCの作成」を選択してください。  

以下の通り項目に記載  

1. 名前タグ：「VPC_for_アプリ名」  
2. IPv4 CIDR ブロック：「10.0.0.0/16」  
3. IPv6 CIDR ブロック：「IPv6 CIDR ブロックなし  
4. テナンシー：「デフォルト」  

右下の「作成」を選択  

## 2.サブネットの作成

画面左の「サブネット」を選択して、詳細ページ左上の「サブネットの作成」を選択してください。  

以下の通り項目に記載  

1. 名前タグ：「アプリ名-Subnet-1a」  
2. VPCに先ほど作成した：「VPC_for_アプリ名」  
3. アベイラビリティーゾーン：「ap-northeast-1a」  
4. IPv4 CIDR ブロック：「10.0.0.0/24」  

右下の「作成」を選択  

RDS用にもう一つサブネットを作成します。  
同様に「サブネットの作成」を選択して、以下の通り項目に記載

1. 名前タグ：「アプリ名-Subnet-1c」  
2. VPCに先ほど作成した：「VPC_for_アプリ名」  
3. アベイラビリティーゾーン：「ap-northeast-1c」  
4. IPv4 CIDR ブロック：「10.0.1.0/24」  

右下の「作成」を選択  

## 3.インターネットゲートウェイの作成

画面左の「インターネットゲートウェイ」を選択して、詳細ページ左上の「インターネットゲートウェイの作成」を選択してください。  

以下の通り項目に記載

1. 名前タグ：「Gateway_for_アプリ名」  

右下の「作成」を選択  

このゲートウェイをVPCと紐付けます。  
作成したゲートウェイを選択した状態で、「アクション」を選択し、「VPCにアタッチ」を選択します。  

VPCに先ほど作成した「VPC_for_アプリ名」を指定  
右下の「アタッチ」を選択  

## 4.ルートテーブルの作成

画面左の「ルートテーブル」を選択して、詳細ページ左上の「ルートテーブルの作成」を選択してください。  

以下の通り項目に記載  

1. 名前タグ：「Table_for_アプリ名」  
2. VPCに先ほど作成した：「VPC_for_アプリ名」  

右下の「作成」を選択  

次に作成したルートテーブルに「インターネットゲートウェイをルーティングするというルール」を記載したいと思います。  

作成したテーブルを選択した状態で、下のタブの「ルート」を選択し、「ルートの編集」を選択します。  

「ルートの追加」ボタンを選択し、以下の通り項目に記載  

1. 送信先：「0.0.0.0/0」  
2. ターゲットの項目を選択し、「Internet Gateway」を選択、先ほど作成したゲートウェイを選択  

「ルートの保存」を選択します。  

最後にサブネットとの紐付けを行います。  
画面左の「サブネット」を選択して、先ほど作成した「アプリ名-Subnet-1a」を選択した状態で、画面下のルートテーブルタブを選択して、「ルートテーブルの関連付けの編集」ボタンを選択  

ルートテーブルIDの項目を選択し、先ほど作成したテーブル「Table_for_アプリ名」を選択します。  
右下の「保存」を選択します。  

同様に、もう一つのサブネットの「アプリ名-Subnet-1c」もルートテーブルを紐付けしていきます。  
同手順でルートテーブルの関連付けを実施してください。  

## 5.セキュリティグループの作成

続けてセキュリティグループの設定を行っていきましょう。  
画面左の「セキュリティグループ」を選択して、詳細ページ左上の「セキュリティグループの作成」を選択してください。  

以下の通り項目に記載

1. セキュリティグループ名：「アプリ名-SecurityGroup」  
2. 説明：「Security for アプリ名」  
3. VPCに先ほど作成した：「VPC_for_アプリ名」  

右下の「作成」を選択  

作成したセキュリティグループに実際にルールを記載していきます。  
先ほど作成したセキュリティグループを選択した状態で、下のタブの「インバウンドのルール」を選択し、  
「ルールの編集」を選択します。  

「ルールの追加」ボタンを選択します。  
以下の通り項目に記載  

1. タイプ：「SSH」  
2. プロトコル：「TCP」※自動選択  
3. ポート範囲：「22」※自動選択  
4. ソース：「マイIP」（自分のグローバルIPが表示される）  
5. 説明：「任意」（空白でもOKです）  

さらにルールを追加するので、再度「ルールの追加」ボタンを選択します。  
新しく追加されたレコードに以下の通り記載  

1. タイプ：「HTTP」  
2. プロトコル：「TCP」※自動選択  
3. ポート範囲：「80」※自動選択  
4. ソース：「任意の場所」（0.0.0.0/0, ::/0）  
5. 説明：「任意」（空白でもOKです）  

「ルールの保存」を選択します。"
【 第2章 】RDSの設定,"次にRDS（Relational Database Service）の設定、  
つまりはデータベースの設定を行っていきます。  

## 1.サブネットグループの作成

画面左上のサービスを開き、検索欄に「RDS」と入力し、「RDS」を選択します。  

画面左の「サブネットグループ」を選択して、  
詳細ページ右上の「DBサブネットグループの作成」を選択してください。  

以下の通り項目に記載  
サブネットグループの詳細  
1. 名前「アプリ名-DB-Subnet-Group」  
2. 説明「DB Subnet Group for アプリ名」  
3. VPC「VPC_forアプリ名」  
サブネットの追加  
「このVPCに関連するすべてのサブネットを追加します」ボタンを選択  
下部に自動的に二つのサブネットが追加された事を確認  
「作成」を選択します。  

## 2.DBインスタンスの作成

画面左の「データベース」を選択して、  
詳細ページ右上の「データベースの作成」を選択してください。  

**データベース作成方法を選択**  
「標準作成」を選択  

**エンジンのオプション**  
1. エンジンのタイプ：「好きなDBエンジンを選択」※今回はMySQL  
2. バージョン：「任意のMySQLのバージョンを選択」※今回はMySQL 5.7.26を選択  

**テンプレート**  
「無料利用枠」を選択  

**設定**  
1. DB インスタンス識別子：「アプリ名-mysql」  
2. マスターユーザー名：「お好きな設定で」※今回はroot  
3. マスターパスワード：「お好きな設定で」  

**DB インスタンスサイズ**　※初期設定でOK  
「標準クラス（mクラスを含む）」を選択  

**ストレージ**　※初期設定でOK  
1. ストレージタイプ：「プロビジョンドIOPS(SSD)」  
2. ストレージ割り当て：「20」  
3. プロビジョンド IOPS：「1000」  
4. ストレージの自動スケーリングを有効にする：「チェックを入れる」  
5. 最大ストレージしきい値：「1000」  

**可用性と耐久性**　※初期設定でOK  
1. マルチ AZ 配置「スタンバイインスタンスを作成する」を選択  

**接続**  
1. Virtual Private Cloud (VPC)「VPC_for_アプリ名」  
「追加の接続設定」を選択  
2. サブネットグループ：「アプリ名_db-subnet-group」  
3. パブリックアクセス可能：「なし」を選択  
4. VPC セキュリティグループ：「既存の選択」、「default」を×で消し、「アプリ名-SecurityGroup」を追加  
5. アベイラビリティーゾーン：「指定なし」  
6. データベースポート：「3306」  

**データベース認証**　※初期設定でOK  
1. データベース認証オプション：「パスワード認証」にチェック  

**「追加設定」を選択**  

**データベースの選択肢**　※データベース名だけ変更  
1. 最初のデータベース名：「アプリ名_production」  
2. DB パラメータグループ：「default.mysql5.7」  
3. オプショングループ：「default:mysql-5-7」  

**バックアップ**  ※バックアップの保持期間だけ変更  
1. 自動バックアップの有効化：「チェックを入れる」  
2. バックアップ保持期間：「1日間」  
3. バックアップウィンドウ：「設定なしにチェック」  
4. スナップショットにタグをコピー：「チェック」  

以下、初期設定でOK  

「データベースの作成」を選択してください。  

ステータスが「利用可能」になるまでしばらく待ちましょう。  

これで、AWS上に自分の領域を確保し、データベースの作成までが完了しました。  
次にEC2と呼ばれる仮想サーバーの構築をしていきましょう！"
【 第3章 】EC2の設定,"クラウド上に存在する仮想サーバーのEC2（Elastic Compute Cloud）を作っていきましょう！  
噛み砕いて説明すると、クラウド上に自分のパソコンを作成するといったイメージです。  

## 1.インスタンスの作成

画面左上のサービスを開き、検索欄に「EC2」と入力し、「EC2」を選択します。  

画面左の「インスタンス」を選択して、  
詳細ページ左上の「インスタンスの作成」を選択してください。  

**ステップ 1: Amazon マシンイメージ (AMI)**
今回は一番上ので無料利用枠の「Amazon Linux 2 AMI (HVM), SSD Volume Type」「x86」を選択します。  

**ステップ 2: インスタンスタイプの選択**  
こちらも無料利用枠の「t2.micro」を選択します。  
(※無料枠は、AWSに登録して1年未満のユーザーにのみ与えられる特権です。  
ですので、表示されない方も多数いらっしゃることをご了承ください。)  
右下の「次のステップ：インスタンスの詳細の設定」を選択してください。  

**ステップ 3: インスタンスの詳細の設定**  
以下の通り項目に記載  
1. インスタンス数：「1」  
2. 購入のオプション：「チェックなし」  
3. ネットワーク：「VPC_for_アプリ名」  
4. サブネット：「アプリ名_Subnet_1a」  
5. 自動割り当てパブリック IP：「サブネット設定を使用（無効）」  
6. 配置グループ：「チェックなし」  
7. キャパシティーの予約：「開く」  
8. IAM ロール：「なし」  
9. シャットダウン動作：「停止」  
10. 終了保護の有効化：「チェック入れる」  
11. モニタリング：「チェックなし」  
12. テナンシー：「共有」  
13. Elastic Inference：「チェックなし」  
14. T2/T3 無制限：「チェックなし」  
15. ファイルシステム：「空白」  
右下の「次のステップ：ストレージの追加」を選択してください。  

**ステップ 4: ストレージの追加**  
初期設定のままでOKです。  
右下の「次のステップ：タグの追加」を選択してください。  

**ステップ 5: タグの追加**  
「タグの追加」を選択し、以下の通り項目に記載  
1. キー：「Name」  
2. 値：「アプリ名-instance」  
右下の「次のステップ：セキュリティグループの設定」を選択してください。  

**ステップ 6: セキュリティグループの設定**  
セキュリティグループの割り当て：「既存のセキュリティグループを選択する」にチェック  
表示されたセキュリティグループから先ほど作成した「アプリ名-SecurityGroup」にチェック  
右下の「確認と作成」を選択してください。  

「起動」ボタンを選択してください。  

「既存のキーペアを選択するか、新しいキーペアを作成します。」という画面が表示されます。  

上の選択ボックスから「新しいキーペアの作成」を選択  
空白のキーペア名に「アプリ名」を入力  
「キーペアのダウンロード」を選択  

ダウンロードダイアログが開き、「アプリ名.pem」を任意のディレクトリに保存してください。  
（Macの方はDownloadディレクトリに保存しておいてください）  

「インスタンスの作成」ボタンを選択し、「インスタンスの表示」ボタンを選択してください。  
右下の「確認と作成」を選択してください。  

## 2.Elastic IPの作成、紐付け
画面左の「Elastic IP」を選択して、詳細ページ右上の「Elastic IPアドレスの割り当て」を選択してください。  

以下の通り項目に記載　※初期設定でOK  
1. 「Amazon の IPv4 アドレスプール」を選択  
右下の「割り当て」を選択してください。  

次に割り当てたElastic IPをインスタンスに紐付けします。  
先ほど割り当てられたElastic IPを選択した状態で、「アクション」ボタンを選択し、「Elastic IPアドレスの関連付け」を選択します。  

以下の通り項目に記載  
1. リソースタイプ：「インスタンス」  
2. インスタンス：「アプリ名-instance」を選択  
3. プライベート IP：「クリックして表示されるIPを選択」  
4. 再関連付け：「チェック入れる」  
右下の「関連付け」を選択してください。  

## 3.EC2へのログイン

まずは作成したインスタンスが起動している事を確認してください。  

作成したインスタンスのインスタンスの状態が**「running」**となっていればOKです。  

後ほど使用するので、Elastic IPをメモしておいてください。  

ここからはコンソール画面を使っていきます。  

まずは下準備です。  

・python  
・pip(pythonのパッケージ管理システム)  
・awscli(awsをPCのコンソール上から扱うためのもの)  

これらをインストールしていきます。  

ターミナルから以下のコマンドを実行してください。  

```Bash:ローカル環境
$ brew install python
$ sudo easy_install pip
$ sudo easy_install nose
$ sudo easy_install tornado
$ sudo -H pip install awscli --upgrade --ignore-installed six
```

EC2インスタンスへのログイン設定を行っていきましょう  

AWSではデフォルトでec2-userという名前のユーザが用意されています。  

そこで、以下の手順で進めていきたいと思います。  

1. ec2-userでEC2へログイン  
2. 新たなユーザの作成  
3. 作成したユーザにec2-userと同様の権限を付与  
4. 新たなユーザで再度ログイン  


「キーペアのダウンロード」で保存したpemファイルを~/.ssh/へ移動させます。  

```Bash:ローカル環境
$ mkdir .ssh/
$ mv Downloads/アプリ名.pem .ssh/
（キーペアをDownloadsディレクトリに保存した場合）
```

キーペアの権限を変更してアクセス権を付与  

```Bash:ローカル環境
$ cd .ssh/
$ chmod 600 アプリ名.pem
```

公開鍵を利用してec2-userとしてログイン  

```Bash:ローカル環境
$ ssh -i アプリ名.pem ec2-user@Elastic IP
（greetingの場合は、$: ssh -i greeting.pem ec2-user@3.115.68.178となります）

yesかnoを聞かれるので、yesと入力
```

EC2のアスキーアートが表示されれば、ログイン成功です。  


続いて新たなユーザを作成し、作成したユーザにマスター権限を与えていきます。  

新規ユーザの登録  

```Bash:サーバー環境
$ sudo adduser ユーザ名
（著者は：$ sudo adduser yuki）
```

新規ユーザのパスワード登録  

```Bash:サーバー環境
$ sudo passwd ユーザ名
```

ここからviエディタを使用していきます。  
viコマンドの詳細は以下のページで確認してください。  
viコマンド（vimコマンド）リファレンス  
https://qiita.com/TD3P/items/0510bee10bcfd88afeee  

今回の作業で必要なコマンドは以下です。  

- vi ファイル名    ...ファイルをviエディタで表示
- i   ...入力モードに切り替え
- escボタン   ...入力モード終了
- :wq    ...書込み後終了
- :q    ...書込みを行わず終了(quit の意味)

設定を編集  

```Bash:サーバー環境
$ sudo visudo

1.rootに関する権限の記述箇所(/root.*ALLで検索可能)
root    ALL=(ALL)       ALL　　を探す。
2.その下に、作成したユーザーに権限を追加する記述（iを入力すれば入力モードに切り替わります）
ユーザ名   ALL=(ALL)       ALL 　を追加する
3.escを押して入力モードを終了
4.:wq で保存&編集完了
```

編集が完了したらユーザの切り替えを行います。  

```Bash:サーバー環境
$ sudo su - ユーザ名
```

無事に[ec2-user|が(作成したユーザー名)と切り替わればOKです。  

SSH通信によるインスタンスへのログイン  

続いては実際にSSHという通信方法を用いてインスタンスにログインしていきます。  
流れとしては下記となります。  
1. ローカルで鍵の生成  
2. その鍵をどの通信の認証時に使用するか等を設定  
3. サーバーとの認証処理を行う。  
4. 実際に新ユーザーでログイン  

では早速ローカルで鍵の作成から始めていきましょう。  
（こちらは**ローカル環境**での作業となるので、新たにコンソール画面を開き作業してください）  


公開鍵の作成  

```Bash:ローカル環境
$ cd .ssh
$ ssh-keygen -t rsa
--------------------------------
以下のメッセージが表示されるので、「アプリ名_key_rsa」と入力
Enter file in which to save the key ():greeting_key_rsa

何もせずにそのままエンター
Enter passphrase (empty for no passphrase):

何もせずにそのままエンター
Enter same passphrase again:
--------------------------------
```

「アプリ名_key_rsa」と「アプリ名_key_rsa.pub」が生成されたことを確認  

```Bash:ローカル環境
$ ls
```

VIMを起動し、設定ファイルを編集する  

```Bash:ローカル環境
$ vi config
--------------------------------
#以下を追記

Host アプリ名_key_rsa
  Hostname 前出のElastic IP #自分の設定に合わせて
  Port 22
  User ユーザ名 #先ほどのユーザー名
  IdentityFile ~/.ssh/アプリ名_key_rsa #秘密鍵の設定
--------------------------------
```
:wq で保存&編集完了  

鍵の中身をターミナル上に出力、ssh〜localまで全文コピーしておく  

```Bash:ローカル環境
$ cat アプリ名_key_rsa.pub
```

上記により、  
1.ローカルで鍵の生成  
2.その鍵をどの通信の認証時に使用するか等を設定  
ここまでが完了しました。  
次はサーバー側の作業となります。  
（先ほど切り替えたユーザ名のままでの作業となります）  

```Bash:サーバー環境
$ mkdir .ssh
$ chmod 700 .ssh
$ cd .ssh
$ vi authorized_keys
--------------------------------
#開いたviに先ほどコピーした鍵の中身を貼り付け
ssh-rsa ~~~~~ .local
--------------------------------
:wq で保存&編集完了
$ chmod 600 authorized_keys
$ exit
$ exit
```

これで新ユーザに権限が付与されたはずです。  
ローカルで下記コマンドを入力し、実際にログインできるか試してみましょう。  

```Bash:ローカル環境
$ ssh アプリ名_key_rsa
```

ログインできれば、無事ユーザ設定は終了です。  

これで自由にサーバーにログイン出来るようになりました！  
次からはサーバーの環境構築をやっていきましょう！"
【 第4章 】サーバー環境の構築,"EC2にログインできたらいよいよRubyやNginx、MySQLなどをインストールしていきます。  

## 1.Nginxの設定  

### 1.サーバーをアップデート  

```bash:サーバー環境
$ sudo yum update
（パスワードや確認を求められます。確認はYESの'y'を入力）
```

### 2.Nginxのインストール  

```bash:サーバー環境
$ sudo amazon-linux-extras install nginx1.12 -y
```

### 3.Nginxの起動とインスタンス起動時自動起動の設定  

```bash:サーバー環境
$ sudo systemctl start nginx
$ sudo systemctl enable nginx
$ systemctl status nginx
```

## 2.必要なプラグインのインストール  

### 1.各種プラグインのインストール  

```bash:サーバー環境
$ sudo yum install git make gcc-c++ patch openssl-devel libyaml-devel libffi-devel libicu-devel libxml2 libxslt libxml2-devel libxslt-devel zlib-devel readline-devel ImageMagick ImageMagick-devel epel-release
```

### 2.MySQL 5.7 をインストール  

```bash:サーバー環境
$ sudo rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
$ sudo yum install mysql-devel mysql57 mysql57-server
$ sudo yum install mysql mysql-devel mysql-server mysql-utilities
```

### 3.Node.js 6x をインストール  

```bash:サーバー環境
$ curl -sL https://rpm.nodesource.com/setup_6.x | sudo bash -
$ sudo yum -y install nodejs
$ yum install nodejs --enablerepo=epel
```

### 4.rbenv をインストール  

```bash:サーバー環境
$ git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
$ echo 'export PATH=""$HOME/.rbenv/bin:$PATH""' >> ~/.bash_profile
$ echo 'eval ""$(rbenv init -)""' >> ~/.bash_profile
$ source ~/.bash_profile
```

### 5.ruby-build をインストール  

```bash:サーバー環境
$ git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
$ rbenv rehash
```

### 6.Rubyをインストール  
**ローカル環境にて制作したアプリをどのバージョンのRubyで制作したか確認してください。**  
アプリのディレクトリ内で`ruby -v`でバージョン確認です。  
（著者はruby 2.6.0で制作）  

```bash:サーバー環境
$ rbenv install -v 2.6.0
$ rbenv global 2.6.0
$ rbenv rehash
$ ruby -v
```

## 3.MySQLをセットアップする  

### 1.RDSの「インスタンス」から「エンドポイント」を確認し、メモしておく  
RDSの画面左の「データベース」を選択して、  
作成した「アプリ名-mysql」を選択してください。  

画面下部の「接続とセキュリティ」内に記載されている  
「エンドポイント」をコピーしておく。  
（著者のエンドポイント:`greeting-mysql.c6guqbdzgjmx.ap-northeast-1.rds.amazonaws.com`）  

### 2.セキュリティグループの設定  
EC2の画面左の「セキュリティグループ」を選択。  
作成した「アプリ名-SecurityGroup」の「グループID」をコピーしてください。  

「アプリ名-SecurityGroup」を選択した状態で、画面下部の「インバウンド」を選択して、「編集」ボタンを選択します。  

「ルールの追加」ボタンを選択します。  
以下の通り項目に記載  
1. タイプ：「MYSQL/Aurora」  
2. プロトコル：「TCP」※自動選択  
3. ポート範囲：「3306」※自動選択  
4. ソース：「カスタム」「コピーしたグループID」  
5. 説明：「任意」（空白でもOKです）  
「ルールの保存」を選択します。  

### 3.MySQLへログイン  
再びサーバーを操作しているターミナルでの作業となります。  
先ほどメモしておいたエンドポイント値を利用してMySQLへログインします。  

```bash:サーバー環境
$ mysql -h エンドポイント -P 3306 -u root -p
（著者の場合：$ mysql -h greeting-mysql.c6guqbdzgjmx.ap-northeast-1.rds.amazonaws.com -P 3306 -u root -p)
```

パスワードを確認されたらRDSのパスワードを入力  

[mysql]という表示に変わればログイン成功  

### 4.データベースの確認  
以下のコマンドで、現在のデータベースの確認をしておきましょう。  

```bash:サーバー環境
mysql> show databases;
# データベース一覧が表示され、アプリ名_production が存在していればOK
mysql> exit;
```"
【 第5章 】Railsアプリを配置する,"サーバーのrubyの実行環境が整いました！  
これから、ご自身で作成されたアプリをgitからクローンして、  
EC2インスタンス内に配置していきましょう。  

ここが**最大の鬼門**です！少し手順が多いですが頑張りましょう！！  

## 1.GitHubとの連携の為の公開鍵作成  

初めにgitに関する設定ファイルを生成します。  

.gitconfigファイルを新たに生成  
生成したconfigファイルに情報を記述する  

```bash:サーバー環境
$ cd ~
$ vi .gitconfig
--------------------------------
#以下を記述
[user]
  name = your_name #gitに登録した自分の名前
  email = hoge@hoge.com #git登録時の自分のメアド

[alias] #これはお好きに
  a = add
  b = branch
  ch = checkout
  st = status

[color] #色付け
  ui = true

# githubの場合
[url ""github:""] #pull、pushのための設定
    InsteadOf = https://github.com/
    InsteadOf = git@github.com:
# bitbucketの場合
[url ""bitbucket:""]
    InsteadOf = https://ユーザ名@bitbucket.org/
    InsteadOf = git@bitbucket.org:
--------------------------------
:wq で保存&編集完了
```

次にアプリを配置するディレクトリを作成していきます。  

```bash:サーバー環境
$ cd /
$ sudo mkdir var/www
$ sudo mkdir var/www/rails
$ sudo chown ユーザ名 var
$ cd var/
$ sudo chown -R ユーザ名 www
```

gitとの接続に必要な鍵を格納するディレクトリに移動  

```bash:サーバー環境
$ cd ~
$ chmod 700 .ssh
$ cd .ssh
```

gitとの接続に必要な鍵を生成していきます。  

```bash:サーバー環境
$ ssh-keygen -t rsa
--------------------------------
以下のメッセージが表示されるので、「aws_git_rsa」と入力
Enter file in which to save the key ():aws_git_rsa

何もせずにそのままエンター
Enter passphrase (empty for no passphrase):

何もせずにそのままエンター
Enter same passphrase again:
--------------------------------
```

「aws_key_rsa」と「aws_key_rsa.pub」が生成されたことを確認

```bash:サーバー環境
$ ls
```

configファイルの生成

```bash:サーバー環境
$ vi config
-----------------------------
# githubの場合以下を追記
Host github github.com
  Hostname github.com
  User git
  IdentityFile ~/.ssh/aws_git_rsa
# bitbucketの場合以下を追記
Host bitbucket
  Hostname bitbucket.org
  User git
  IdentityFIle ~/.ssh/aws_git_rsa
-----------------------------
:wq で保存&編集完了
```

公開鍵の中身を表示する  

```bash:サーバー環境
$ cat aws_git_rsa.pub
-----------------------------
ssh-rsa~~~
-----------------------------
```

一度インスタンスとの接続で行った鍵の作成の流れなので、問題ないかと思います。  
そしてcatで表示させた公開鍵をgithubにアクセスして登録していきます。  

## 2.公開鍵をGitHubにアップする  
以下のページでGitHubで公開鍵の設定が可能です。  
（GitHubに登録していることが前提条件です）  
https://github.com/settings/ssh  

GitHubのページへ遷移した後、「New SSH Key」ボタンを選択します。  

以下の通り項目に記載  
1 . Title：「aws_git_rsa.pub」 #公開鍵名  
2 . Key：「ssh-rsa~」 #catで確認した公開鍵の中身  
「Add SSH Key」ボタンを選択する。  

GitHub側の設定が終われば、ターミナルから接続が可能か確認してみます。  

```bash:サーバー環境
ターミナルへ戻り設定ファイルの権限を変更
$ chmod 600 config

GitHubへの接続確認。途中の質問にはYesで。GitHubのユーザ名が出てくれば成功。
$ ssh -T git@github.com
```

## 3.GitHubからアプリをクローン  
登録が済んだら、いよいよクローンです。  

```bash:サーバー環境
$ cd ~
$ cd /var/www/rails
$ git clone git@github.com:~~~~~~
```

git cloneの後に続くURLはGitHubの下記の手順より取得してください。  
1. デプロイしたいアプリのリモートレポジトリへ移動  
2. 「clone or download」を選択  
3. 「Use SSH」を選択して、「Clone with SSH」へ変更する  
4. 表示されているURLをコピーする  

下記コマンドを実行し、ご自身のアプリ名が記載されたディレクトリが存在すれば、見事クローン成功です。  

```bash:サーバー環境
ファイルやディレクトリの情報を表示
$ ls
```

クローンしたアプリに移動し、必要なGemをインストールしましょう。  

```bash:サーバー環境
$ cd アプリ名
$ bundle install
```

### （補足1）pgエラー、sqliteエラーの対応  
データベースでpostgereやSQLiteを使用されており、エラーが出た場合は以下のコマンドを試してみてください。  

・**pgでエラー**  

```bash:サーバー環境
$ sudo yum install postgresql-devel
$ gem install pg -v '1.1.4' --source 'https://rubygems.org/'
```

・**sqliteでエラー**  

```bash:サーバー環境
$ sudo yum install sqlite-devel
$ gem install sqlite3 -v '1.4.1' --source 'https://rubygems.org/'
```

### （補足2）JavaScriptエラーの対応  
ここで、下記のJavaScript関連のエラーが発生した方は、以下の手順を実行してください。  
`ExecJS::RuntimeUnavailable: Could not find a JavaScript runtime.`  

従来は「therubyracer」というGemを追加すれば良かったのですが、  
近年はこのGemだとサーバーにアップした後にエラーが発生する為、  
「mini_racer」というGemを追加する  

```bash:サーバー環境
Gemfileに以下を記述(vi Gemfile)
gem 'mini_racer'

インストール
$ bundle install
```

### （補足3）その他コマンドメモ  
その他、著者が自身のアプリのデプロイ時に必要となったコマンドを記載しておきます。  
お役に立てば幸いです。  

**Railsのインストール**  

```bash:サーバー環境
$ gem install rails
$ rbenv rehash
$ rails -v
```

**LinuxでのHomebrewのインストール**  
以下の公式サイトからコードをコピー  
https://docs.brew.sh/Homebrew-on-Linux  

**bundlerが無いというエラー**  
以下のコードを参考にしてください。  

```bash:サーバー環境
$ gem install bundler:2.0.2
$ bundle install
```


## 4.アプリのシークレットの設定  
クローンが成功したら、シークレットを生成し設定していきます。  

Rails5.2から新規アプリを作成した時に`config/secrets.yml`が生成されず、  
代わりに`config/credentials.yml.enc`が生成されるようになりました。  

今回は「credentials.yml.enc」の編集を行っていきます。  

まずconfigディレクトリに格納されているファイルを確認します。  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ ls config
```

これから、「credentials.yml.enc」の中身を編集していきます。  

### 1.マスターキーの作成  
「credentials.yml.enc」を編集する為には  
「master.key」が必要となります。  

ローカル環境の同ディレクトリには格納されていると思いますが、  
サーバー環境の同ディレクトリには格納されていません。  
「master.key」はGit管理せぬよう指定されており、  
本番サーバー上でプロジェクトのリポジトリをクローンしても、このファイルはついてこない様になっております。  

そこで手動で「master.key」を生成します。  

**ローカル環境** のクローン元のアプリディレクトリにて、以下の手順を実行してください。  

```bash:ローカル環境(ローカル環境/アプリ名/)
$ vi config/master.key
```

表示された英数字をメモしてください。  

次に**サーバー環境**で以下の手順を実行してください。  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ cd config
$ vi master.key
-----------------------------
# ローカル環境のmaster.keyの値を入力
08deg424~~~~~
-----------------------------
```
:wq で保存&編集完了  


これで「credentials.yml.enc」を編集する準備ができました。  

### 2.credentials.yml.encの編集  

初めにローカル環境にてシークレットを生成します。  
**ローカル環境** にて以下の手順を実行してください。  

```bash:ローカル環境(ローカル環境/アプリ名/)
$ bundle exec rake secret
-----------------------------
d8e62101561e66cd4cfd855785087f4737c4e16787782c01b0b635eafa091e711e9f59ea021e2ee2237f18eae2ccbb1f86975979b3fdc2c7892764b326f11f9a
-----------------------------
```

表示されたシークレットキーをコピーしてください。  

次にローカルで生成したシークレットキーを  
「credentials.yml.enc」に記載していきます。  

**サーバー環境** にクローンしたアプリのディレクトリの最上階層（configの一つ上)で以下の手順を実行してください。  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ EDITOR=vim bin/rails credentials:edit
-----------------------------
# aws:
#   access_key_id: 123
#   secret_access_key: 345

# Used as the base secret for all MessageVerifiers in Rails, including the one protecting cookies.
secret_key_base: d8e62101561e66cd4cfd855785087f4737c4e16787782c01b0b635eafa091e711e9f59ea021e2ee2237f18eae2ccbb1f86975979b3fdc2c7892764b326f11f9a #生成したシークレットキー
-----------------------------
```
:wq で保存&編集完了  

これでアプリのシークレットの設定は完了です  

## 5.Nginxの設定  
最初にインストールを行ったNginx（エンジンエックス）の設定ファイルを修正します。  

以下の手順を実行してください。  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ cd /etc/nginx/conf.d/
$ sudo vi アプリ名.conf
-----------------------------
#以下を記述：合計7箇所変更点があります
# log directory
error_log  /var/www/rails/アプリ名/log/nginx.error.log; #自分のアプリケーション名に変更
access_log /var/www/rails/アプリ名/log/nginx.access.log; #自分のアプリケーション名に変更

upstream unicorn_server {
    server unix:/var/www/rails/アプリ名/tmp/sockets/.unicorn.sock fail_timeout=0; #自分のアプリケーション名に変更
}

server {
    listen 80;
    client_max_body_size 4G;
    server_name ~~~.~~~.~~~.~~~; #アプリのElastic IPに変更

    keepalive_timeout 5;

    # Location of our static files
    root /var/www/rails/アプリ名/public; #自分のアプリケーション名に変更

    location ~ ^/assets/ {
        root /var/www/rails/アプリ名/public; #自分のアプリケーション名に変更
    }

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        if (!-f $request_filename) {
            proxy_pass http://unicorn_server;
            break;
        }
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /var/www/rails/アプリ名/public; #自分のアプリケーション名に変更
    }
}
-----------------------------
```
:wq で保存&編集完了  

権限の変更  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ cd /var/lib
$ sudo chmod -R 775 nginx
```

## 6.Unicornの設定  
Unicornとはアプリケーションサーバーの一種です。  
アプリ本体を格納するUnicornを設定していきましょう。  

### 1.Unicornのインストール  

GemファイルにUnicornを追記  

```bash:サーバー環境(/var/www/rails/アプリ名/)
vi Gemfile
-----------------------------
#以下を追記
group :production, :staging do
    gem 'unicorn'
end
----------------------------
```
:wq で保存&編集完了  

Unicornのインストール  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ gem install bundler
$ bundle install
```

### 2.Unicornの設定ファイルの作成  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ vi config/unicorn.conf.rb
-----------------------------
#以下を記述：合計1箇所変更点があります
# set lets
  $worker  = 2
  $timeout = 30
  $app_dir = ""/var/www/rails/アプリ名"" #自分のアプリケーション名
  $listen  = File.expand_path 'tmp/sockets/.unicorn.sock', $app_dir
  $pid     = File.expand_path 'tmp/pids/unicorn.pid', $app_dir
  $std_log = File.expand_path 'log/unicorn.log', $app_dir
  # set config
  worker_processes  $worker
  working_directory $app_dir
  stderr_path $std_log
  stdout_path $std_log
  timeout $timeout
  listen  $listen
  pid $pid
  # loading booster
  preload_app true
  # before starting processes
  before_fork do |server, worker|
    defined?(ActiveRecord::Base) and ActiveRecord::Base.connection.disconnect!
    old_pid = ""#{server.config[:pid]}.oldbin""
    if old_pid != server.pid
      begin
        Process.kill ""QUIT"", File.read(old_pid).to_i
      rescue Errno::ENOENT, Errno::ESRCH
      end
    end
  end
  # after finishing processes
  after_fork do |server, worker|
    defined?(ActiveRecord::Base) and ActiveRecord::Base.establish_connection
  end
-----------------------------
```
:wq で保存&編集完了  

これでUnicornの設定も完了です！  

## 7.DBの設定  
続いてDBの設定を行います。  

DBへアクセスする情報（ユーザー名やパスワード等）をdatabase.ymlへ直接記入すると  
セキュリティ的に問題があるので、環境変数を使用して情報を受け渡していきます。  

今回は`dotenv-rails`を使用して変数管理を行っていきます。  

### 1.dotenv-railsの導入  

Gemfileを編集する  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ vi Gemfile
```

Gemfileに以下を記述  

```bash:Gemfile
# 環境変数の管理をするもの
gem 'dotenv-rails'
```
:wq で保存&編集完了  

インストール  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ bundle install
```

シークレットキーを作成します。  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ bundle exec rake secret
```
表示されたシークレットキーはコピーしておいてください。  

次にアプリケーションのルートディレクトリに.envファイルを作成し、  
その中にシークレットキーの記述を記載してください。  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ touch .env
$ vim .env
```

```bash:.env
#シークレットキーにコピーしたキーを貼り付けてください。
SECRET_KEY_BASE=シークレットキー
```
:wq で保存&編集完了  

ファイルの記述ができたら結果を確認します。  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ source .env
$ echo $SECRET_KEY_BASE
```

シークレットキーの値が返ってきたら設定完了です。  

### 2.MySQLの環境変数の設定  

先ほどのenvファイルに、MySQLの変数を設定していきます。  
シークレットキーの下へ追記してください。  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ vim .env
```

```bash:.env
DB_NAME=データベース名_production #作成したDB名
DB_USERNAME=root #RDSのユーザー名
DB_PASSWORD=********* #RDSのパスワード
DB_HOSTNAME=greeting-mysql.c6guqbdzgjmx.ap-northeast-1.rds.amazonaws.com # RDSのエンドポイント
```
:wq で保存&編集完了  

変数の値を確認します。  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ source .env
$ echo $DB_NAME
$ echo $DB_USERNAME
$ echo $DB_PASSWORD
$ echo $DB_HOSTNAME
```

入力した情報が表示されればOKです。  

### 3.database.ymlの修正  

環境変数を用いて、データベースにアクセスする設定を変更していきましょう。  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ vi config/database.yml
-----------------------------
#最下部の本番環境の記述のみ変更します
production:
  <<: *default
  database: <%= ENV['DB_NAME'] %>
  username: <%= ENV['DB_USERNAME'] %>
  password: <%= ENV['DB_PASSWORD'] %>
  host: <%= ENV['DB_HOSTNAME'] %>
-----------------------------
```
:wq で保存&編集完了  
  
MySQLの起動  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ sudo service mysqld start
```

マイグレーションを実行  

```bash:サーバー環境(/var/www/rails/アプリ名/)
$ bundle exec rake db:migrate RAILS_ENV=production
```

以上でサーバー環境にアプリを配置する事ができました！  
もうヘトヘトだと思いますが、公開までもう少しです！  
頑張りましょう！"
【 第6章 】ロードバランサーを設定する,"Elastic Load Balancing を利用してロードバランサーの設定を行います。  

## 1. ロードバランサーの作成  
EC2の画面左の「ロードバランサー」を選択して、詳細ページ左上の「ロードバランサーの作成」を選択してください。  

**ロードバランサーの種類の選択**
「Application Load Balancer」の「作成」を選択  

**手順 1: ロードバランサーの設定**  
以下の通り項目に記載  

**基本的な設定**  
1. 名前：「アプリ名-ELB」  
2. スキーム：「インターネット向け」にチェック  
3. IP アドレスタイプ：「ipv4」  

**リスナー**  
デフォルトのままでOK  

**アベイラビリティーゾーン**  
1. VPC：「VPC_for_アプリ名」  
2. アベイラビリティーゾーン：「ap-northeast-1a」「ap-northeast-1c」共にチェック  

**タグ**  
1. キー：「Name」  
2. 値：「アプリ名-Webserver」  

「次の手順：セキュリティ設定の構成」ボタンを選択する。  

**手順 2: セキュリティ設定の構成**  
デフォルトのままでOKです。  
「次の手順：セキュリティグループの設定」ボタンを選択する。  

**手順 3: セキュリティグループの設定**  
以下の通り項目に記載  
1. セキュリティグループの割り当て：「既存のセキュリティグループを選択する」にチェック  
2. 「アプリ名-SecurityGroup」のレコードにチェック  
「次の手順：ルーティングの設定」ボタンを選択する。  

**手順 4: ルーティングの設定**  
以下の通り項目に記載  

**ターゲットグループ**  
1. ターゲットグループ：「新しいターゲットグループ」  
2. 名前：「アプリ名-Target-Group」　※記入  
3. ターゲットの種類：「インスタンス」にチェック  
4. プロトコル：「HTTP」  
5. ポート：「80」  

**ヘルスチェック**  
1. プロトコル：「HTTP」  
2. パス：「/」  

**ヘルスチェックの詳細設定**  
1. ポート：「トラフィックポート」  
2. 正常のしきい値：「5」  
3. 非正常のしきい値：「2」  
4. タイムアウト：「5」  
5. 間隔：「10」　※修正  
6. 成功コード：「200」  

「次の手順：ターゲットの登録」ボタンを選択する。  

**手順 5: ターゲットの登録**  

下部の「インスタンス」欄から、  
「アプリ名-instance」にチェックを入れ、  
「登録済みに追加」ボタンを選択する  

「アプリ名-instance」が上部の「登録済みターゲット」欄に
移動した事を確認  

「次の手順：確認」ボタンを選択する。  
「作成」ボタンを選択する。  

一覧画面から作成したロードバランサーを確認し、一定時間経過後、状態が「active」なら完了。"
【 第7章 】Railsアプリの起動,"## 1.アプリの起動手順  
  
長い長い行程を経て、やっとアプリの起動です。  
  
EC2へSSHでログインし、Railsアプリをプリコンパイルする  
  
```bash:サーバー環境
$ bundle exec rake assets:precompile RAILS_ENV=production
```
  
Nginxを再起動  
  
```bash:サーバー環境
$ sudo service nginx restart
```
  
Unicornを起動  
  
```bash:サーバー環境
$ bundle exec unicorn_rails -c /var/www/rails/アプリ名/config/unicorn.conf.rb -D -E production
```
  
Uniconの起動を確認(プロセスのリストが3行程表示されればOK)  
  
```bash:サーバー環境
$ ps -ef | grep unicorn | grep -v grep
```
  
ブラウザからIPを叩いてアクセス ※IPアドレスはElastic IP  
  
```bash:ブラウザ
http://IPアドレス/
```
  
Railsアプリが無事動作すれば成功  
  
### （補足4）`We're sorry, but something went wrong.`と表示  
残念ながらアプリが作動しなかった場合は、以下のコマンドを試してログを確認してみてください。  
logディレクトリには他にもログファイルが格納されているので、エラーが出力されていないか確認してみてください。  
  
```bash:サーバー環境(/var/www/rails/アプリ名/)
$ cd log
$ tail -n 30 production.log
```
  
エラーの記載があれば、デプロイは出来ているがアプリ内でエラーが発生しています。  
エラーの記載が無ければ、デプロイが出来ていない可能性があります。
  
-----  
  
  
これにてAWSへのRailsアプリのデプロイが完了です！！  
いやぁ〜長かった！  
お疲れ様でした！！  
  
とりあえずアプリの公開は出来ましたが、URLが数字のままだと微妙ですね。  
次はRoute53を使用して公開したアプリのURLにドメインを適用していく手順を記載します。  
ただし、ここまでは1年無料を利用できましたが、Route53もドメインも有料になるので、それでも良い人は次のページもみてください！"
【 第8章 】ドメインの取得,"それではドメインの設定作業を行っていきましょう！  
本項ではお名前.comで自分のドメインを取得するところから説明いたします。  
既にドメインを取得済みの方は次の項まで飛ばしてください。  
  
## 1.お名前.comで好みのドメインの取得  
  
下記URLよりお名前.comへアクセスしてください。  
https://www.onamae.com/  
  
「取得希望のドメイン名を入力。」と書かれている検索欄に  
好みのドメイン名を記載して検索ボタンを押してください。  
（著者は「greeting-app」というドメインを取得してみます）  
  
使用可能なドメインにチェックを入れます。  
ドメインを選択したら、「お申し込みへ進む」ボタンを選択します。  
（著者は「.xyz」を選択しました。これで著者のRailsアプリのURLは「`http://www.greeting-app.xyz`」となります。）  
  
決済処理を行ってください。  
Whois代行転送オプション等のその他オプションは不要です。  
「お申し込みを受け付けました。」と表示されたら「ドメイン設定をする方はこちら」を選択してください。  
  
「ドメイン一覧タブ」を選択し、  
「ドメイン一覧」の中から今回取得したドメインの「ドメイン名」を選択してください。  
  
取得したドメインの詳細画面が開きます。  
こちらの画面の「ネームサーバー情報」を後ほど使用します。  
お名前.comでのドメイン取得は以上で完了です。"
【 第9章 】IPアドレスとドメインの関連付け設定,"AWS上でのDNSであるRoute53を使用して、IPアドレスと取得したドメインを関連付けを行います。  

## 1.Route53の設定  

画面左上のサービスを開き、検索欄に「Route53」と入力し、「Route53」を選択します。  

画面左の「ホストゾーン」を選択して、  
詳細ページ左上の「ホストゾーンの作成」を選択してください。  

以下の通り項目に記載  
サブネットグループの詳細  

1. ドメイン名「取得したドメイン名」（greeting-app.xyz)  
2. コメント「domain for アプリ名」  
3. タイプ「パブリックホストゾーン」  
「作成」ボタンを選択します。  

ドメインに対する「値」が生成されました。  
タイプが「NS」の4つの値を使用していきますのでメモをしておいてください。  

## 2.ネームサーバーの変更  

今回はお名前.comでドメインを取得しましたので、お名前.comで説明させて頂きますが、  
他のサービスでも基本的には同じとなります。  

お名前.comで取得したドメインの詳細画面を開いてください。  
「ネームサーバー情報」の「変更する」ボタンを選択してください。  

上部のドメイン一覧から「今回取得したドメインにチェック」を入れてください。  
「他のネームサーバーを利用」タブを選択し、  
ネームサーバー情報を入力欄に、先ほどRoute53で生成した値を入力してください。  
**末尾の.(ドット)は入れないでください。**  
入力後、「確認画面へ進む」ボタンを選択してください。  
確認画面が表示されますので、「設定する」ボタンを選択してください。  

## 3.ネームサーバーの確認  

ターミナルからネームサーバーの確認を行っていきます。  

サーバで以下のコマンドを実行します。  

```bash:サーバー環境
$ nslookup
```

以下の様に入力します。  

```bash:サーバー環境
> set type=ns
> ドメイン名
```

例  

```bash:サーバー環境
> set type=ns
> greeting-app.xyz
```

以下の様に表示されればOKです。  

```bash:サーバー環境
Server:   10.0.0.2
Address:  10.0.0.2#53

Non-authoritative answer:
greeting-app.xyz  nameserver = ns-1198.awsdns-21.org.
greeting-app.xyz  nameserver = ns-1589.awsdns-06.co.uk.
greeting-app.xyz  nameserver = ns-374.awsdns-46.com.
greeting-app.xyz  nameserver = ns-572.awsdns-07.net.
```

ネームサーバーの設定が実際に反映されるまで数十分かかる事があります。  
上記の様に表示されなくても、時間を置いて再度実行してください。  

## 4.ドメインの適用  

Route53の画面で設定の続きを行っていきます。  

前回の続きの画面で、上部の「レコードセットの作成」ボタンを選択します。  

レコードセットの作成画面で、以下の通り項目に記載  
1. 名前「www」  
2. タイプ「A-IPv4アドレス」  
3. エイリアス「いいえ」にチェック  
4. TTL（秒）「300」  
5. 値「Elastic IP」  
6. ルーティングポリシー「シンプル」  
「作成」ボタンを選択します。  

## 5.Nginxの設定変更  

サーバーで、Nginxの設定を変更します。  

```bash:サーバー環境
$ sudo vi /etc/nginx/conf.d/アプリ名.conf
```

server_nameを「Elastic IP」から「www.ドメイン名」に変更します。  

```bash:サーバー環境
server {
    listen 80;
    client_max_body_size 4G;
    server_name www.greeting-app.xyz; #取得したドメイン名に変更
```
:wq で保存&編集完了  

Railsアプリに移動  

```bash:サーバー環境
$ cd /var/www/rails/アプリ名/
```

Nginxを再起動させます。  

```bash:サーバー環境
$ sudo service nginx restart
```

Unicornのを再起動させていきます。  
まずはUnicornの起動を確認  

```bash:サーバー環境
$ ps -ef | grep unicorn | grep -v grep
```

```
yuki     11914     1  0 11月07 ?      00:00:02 unicorn_rails master -c /var/www/rails/greeting/config/unicorn.conf.rb -D -E production
yuki     11916 11914  0 11月07 ?      00:00:00 unicorn_rails worker[0] -c /var/www/rails/greeting/config/unicorn.conf.rb -D -E production
yuki     11917 11914  0 11月07 ?      00:00:00 unicorn_rails worker[1] -c /var/www/rails/greeting/config/unicorn.conf.rb -D -E production
```

表示されたUnicornの番号をkillします。  
上記の場合、1行目の**11914**のみ`kill`すればOKです。  

```bash:サーバー環境
$ kill 番号
```

Unicornが停止出来たか確認  

```bash:サーバー環境
$ ps -ef | grep unicorn | grep -v grep
```

何も応答がなければ停止状態です。  
Unicornを改めて起動させていきます。  

```bash:サーバー環境
$ bundle exec unicorn_rails -c /var/www/rails/アプリ名/config/unicorn.conf.rb -D -E production
```

ブラウザから設定したドメインにアクセスします。  

```
http://www.greeting-app.xyz/
```

ブラウザにアプリ画面が表示されれば成功です！  
お名前.comで取得したドメインをデプロイしたアプリに紐付ける事が出来ました。  

このままでもOKなのですが、次の記事では現在の「http」のURLを「https」にするSSL化の手順を解説していきます。  
長かった記事も次で最後です！"
【 第10章 】ACMでSSL証明書の取得,"6章でELB（ロードバランサー）を作成しましたが、AWSではELBを利用しているとACM（AWS Certificate Manager）を使用する事ができ、ACMで無料でSSL証明書を利用する事が可能です。  
さっそく、ACMを利用してSSL証明書を取得していきましょう！  
  
## 1.ACM設定  
画面左上のサービスを開き、検索欄に「ACM」と入力し、表示される「Certificate Manager」を選択します。  
  
ACMの画面左側の「証明書のプロビジョニング」の「今すぐ始める」ボタンを選択します。  
  
**証明書のリクエスト**  
「パブリック証明書のリクエスト」を選択  
  
「証明書のリクエスト」ボタンを選択する。  
  
**ステップ 1: ドメイン名の追加**  
ドメイン名の追加欄に「取得したドメイン名」を入力  
（著者の場合、「greeting-app.xyz」）  
そのすぐ下の「この証明書に別の名前を追加」ボタンを選択  
ドメイン名の追加欄に「\*.取得したドメイン名」を入力  
（著者の場合、「\*.greeting-app.xyz」）  
  
「次へ」ボタンを選択  
  
**ステップ 2: 検証方法の選択**  
「DNS の検証」を選択  
「確認」ボタンを選択  
  
**ステップ 3: 確認とリクエスト**  
内容を確認し、「確定とリクエスト」ボタンを選択  
  
**ステップ 4: 検証**  
2つのドメインの検証状態はそれぞれ「検証保留中」となっていると思われます。  
Route53を使用しておりますので、用意されているボタンを使用していきます。  
「Route53でのレコードの作成」ボタンを**それぞれのドメイン**で選択して「作成」ボタンを選択してください。  
下の画像の様に「成功」と表示されればOKです。  
検証状態が「検証保留中」のままで問題ないので、「続行」ボタンを選択してください。  
  
Certificate Managerの画面に戻ります。  
取得したドメイン名レコードの「状況」が「発行済み」になれば、無事にSSL証明書の発行が完了です。  
「発行済み」になるまで少し時間がかかる場合もあるので、何度かリロードボタンを押して、少し様子を見る様にしてください。"
【 第11章 】https化に向けた設定,"## 1.ロードバランサーの設定  
先ほど取得したSSL証明書をロードバランサーで使用していきます。  

EC2の画面左の「ロードバランサー」を選択して、作成済みの「アプリ名-ELB」を選択してください。  
下部の詳細から、「リスナー」タブを選択し、「リスナーの追加」ボタンを選択してください。  

**リスナーの追加**  
以下の通り項目に記載  

1. プロトコルポート：「HTTPS」「443」  
2. デフォルトアクション：「アクションの追加」ボタンを選択  
    「転送先」を選択し、「アプリ名-Target-Group」を選択  
3. セキュリティポリシー：「ELBSecurityPolicy-2016-08」  
4. デフォルトの SSL 証明書：「ACMから（推奨）」「ドメイン名」  
5. 右上の「保存」ボタンを選択  

リスナーに「HTTPS」が追加されましたが、  
「セキュリティグループで許可されていない」と表示されています。  
セキュリティグループの修正を行いましょう。  

## 2.セキュリティグループの設定  
EC2の画面左の「セキュリティグループ」を選択して、作成済みの「アプリ名-SecurityGroup」を選択してください。  
下部の詳細から、「インバウンド」タブを選択し、「編集」ボタンを選択してください。  

「ルールの追加」ボタンを選択します。  
以下の通り項目に記載  

1. タイプ：「HTTPS」  
2. プロトコル：「TCP」※自動選択  
3. ポート範囲：「443」※自動選択  
4. ソース：「任意の場所」（0.0.0.0/0, ::/0）  
5. 説明：「任意」（空白でもOKです）  
6. 「保存」ボタンを選択します。  

これでHTTPSからのアクセスを許可する事ができました。  

## 3.Route53の設定  
次にRoute53の設定を行います。  
画面左上のサービスを開き、検索欄に「Route53」と入力し、「Route53」を選択します。  

作成済みの「ドメイン名」を選択してください。  

私の一連の記事と同手順で進められた方は4つのレコードセットが表示されていると思います。  
その中の「タイプA」の「www.ドメイン名」のレコードセットを選択し、右画面で編集していきます。  

以下の通り項目を修正  

1. 名前：「www.ドメイン名」  
2. タイプ：「A-IPv4アドレス」  
3. エイリアス：「はい」チェック  
4. エイリアス先：「アプリ名-ELBを選択」※ここを修正  
5. ルーティングポリシー：「シンプル」  
6. 「レコードセットの保存」を選択  

## 4.Nginxの設定  
次はターミナルでNginxの設定ファイルを修正していきます。  
Nginxの設定ファイルであるconfファイルですが、以下の2つを混同しがちなので注意してください。  
/etc/nginx/nginx.conf  
/etc/nginx/conf.d/アプリ名.conf  

5章や9章で修正したファイルは後者で、これから設定するファイルは前者です。  

httpでアクセスされたものをhttpsへリダイレクトする記述へ変更します。  

```bash:サーバー環境
$ cd /etc/nginx/
$ sudo vi nginx.conf
--------------------------------
  #server{}欄を以下の通り修正
  #httpでアクセスされたものをhttpsにリダイレクト
  server {
    listen 80;
    proxy_set_header X-Forwarded-Proto $scheme;
    if ( $http_x_forwarded_proto != 'https' ) {
      return 301 https://$host$request_uri;
    }

    # Load configuration files for the default server block.
    include /etc/nginx/default.d/*.conf;

    location / {
    }

    error_page 404 /404.html;
        location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
        location = /50x.html {
    }
  }

  #httpsサーバー
  server {
    listen 443 ssl;
    server_name www.greeting-app.xyz;#ドメイン名に修正
  }
--------------------------------
```
:wq で保存&編集完了  

## 5.HTTPS画面表示  
これで設定が完了したので、NginxとUnicornを再起動させていきます。  

Railsアプリに移動  

```bash:サーバー環境
$ cd /var/www/rails/アプリ名/
```

Nginxを再起動させます。  

```bash:サーバー環境
$ sudo service nginx restart
```

Unicornのを再起動させていきます。  
まずはUnicornの起動を確認  

```bash:サーバー環境
$ ps -ef | grep unicorn | grep -v grep
```

```
yuki     11914     1  0 11月07 ?      00:00:02 unicorn_rails master -c /var/www/rails/greeting/config/unicorn.conf.rb -D -E production
yuki     11916 11914  0 11月07 ?      00:00:00 unicorn_rails worker[0] -c /var/www/rails/greeting/config/unicorn.conf.rb -D -E production
yuki     11917 11914  0 11月07 ?      00:00:00 unicorn_rails worker[1] -c /var/www/rails/greeting/config/unicorn.conf.rb -D -E production
```

表示されたUnicornの番号をkillします。  
上記の場合、1行目の**11914**のみ`kill`すればOKです。  

```bash:サーバー環境
$ kill 番号
```

Unicornを改めて起動させていきます。  

```bash:サーバー環境
$ bundle exec unicorn_rails -c /var/www/rails/アプリ名/config/unicorn.conf.rb -D -E production
```

ブラウザから設定したドメインにアクセスします。  

```
https://www.greeting-app.xyz/
```

ブラウザに鍵のマーク付きでアプリ画面が表示されれば成功です！  

以上でAWSへアプリをデプロイする手順は全て完了です。  
長い道のりでしたが、お疲れ様でした。"